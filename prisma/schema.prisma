datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

// BASE SCHEMA

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  Int
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Company {
  id           String   @id @default(cuid())
  companyName  String
  companyCode  String   @unique
  isActive     String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  firstName     String?
  lastName      String?
  username      String      @unique
  password      String
  image         String?
  company       Company?
  accounts      Account[]
  sessions      Session[]
  UserGroup     UserGroup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ADDED SCHEMA - ADD NEW TABLES BELOW HERE ONWARDS

model UserGroup {
  id        String  @id @default(cuid())
  user_type String?
  user_id   String
  user      User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Stock {
  stockID       Int       @id @default(autoincrement())
  tickerSymbol  String    @unique
  companyName   String    @unique
  exchange      String

  historicalStockPrice    Historical_Stock_Price[]
  MLStockPrice            ML_Stock_Price[]
  inWatchlists            Watchlist[]

}

model Watchlist {
  watchlistID   Int       @id @default(autoincrement())
  stockID       Int       
  tickerSymbol  String

  stocks        Stock[]
}

model Historical_Stock_Price {
  stockID       Int  
  Date          DateTime
  Open          Float
  High          Float
  Low           Float
  Close         Float
  Volume        Int

  @@id([stockID, Date])
  stock         Stock     @relation(fields:[stockID], references:[stockID])
}

model ML_Stock_Price {
  stockID       Int 
  Date          DateTime
  Open          Float
  High          Float
  Low           Float
  Close         Float
  Volume        Int

  @@id([stockID, Date])
  Stock         Stock     @relation(fields:[stockID], references: [stockID])
}